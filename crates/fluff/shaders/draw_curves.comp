#version 460 core
#extension GL_EXT_shader_atomic_float : require

#include "common.glsl"

const int MAX_CURVES_PER_TILE = 16;
const int TILE_SIZE_X = 8;
const int TILE_SIZE_Y = 8;


//////////////////////////////////////////////////////////

// A range of control points in the controlPoints buffer that describes a single curve.
struct ControlPointRange {
    int start;
    int size;
};

struct Tile {
    uint curves[MAX_CURVES_PER_TILE];
};

struct BezPoint {
    vec2 pos;
    float t;
};

//////////////////////////////////////////////////////////


// PARAMETERS

// Position buffer
layout(std430,set=0,binding=0) buffer ControlPointsPosition {
    float position[];
};

layout(std430,set=0,binding=1) buffer CurveBuffer {
    ControlPointRange curves[];
};

layout(set=0,binding=2,r32i) uniform readonly iimage2D tileCurveCountImage;

layout(std430,set=0,binding=3) buffer TileBuffer {
    Tile tiles[];
};

// Push constants
layout(std140, push_constant) uniform PushConstants {
    mat4 viewProjectionMatrix;
    int baseCurve;
    float strokeWidth;
    uint tilesCountX;
    uint tilesCountY;
};

// ------ INPUT ------

// One thread per pixel in a tile
layout(local_size_x=TILE_SIZE_X, local_size_y=TILE_SIZE_Y) in;

// ------ OUTPUT ------

layout(set=0, binding=4) uniform writeonly image2D outputImage;

//////////////////////////////////////////////////////////

void bezierProj(Bezier bez, vec2 pos, out vec2 closestPoint, out float t, out float closestDist) {
    // initial search
    const int maxStep = 16;      // max step for the initial search
    float minDist = 99999999.; // current minimum distance
    int index = 0; // index of the closest point
    for (int i = 0; i <= maxStep; ++i) {
        float d = distance(pos, bezier3(bez, float(i) / maxStep));
        if (d < minDist) {
            index = i;
            minDist = d;
        }
    }

    float t_prev = float(max(index - 1, 0))  / maxStep ;
    float t_next = float(min(index + 1, maxStep) ) / maxStep;
    float t_mid = float(index) / maxStep;

    BezPoint points[3] = BezPoint[3](
    BezPoint(bezier3(bez, t_prev), t_prev),
    BezPoint(bezier3(bez, t_mid), t_mid),
    BezPoint(bezier3(bez, t_next), t_next));

    // refinement
    const int numRefineSteps = 6;
    for (int i = 0; i < numRefineSteps; ++i) {
        BezPoint prev = points[0];
        BezPoint next = points[2];
        BezPoint mid = points[1];

        vec2 mid_prev = bezier3(bez, .5 * (prev.t + mid.t)); // halfway bewteen prev and mid
        vec2 mid_next = bezier3(bez, .5 * (next.t + mid.t)); // halfway between next and mid

        float d_prev = distance(pos, mid_prev);
        float d_next = distance(pos, mid_next);
        float d_mid = distance(pos, mid.pos);

        // find the closest point between the three
        float md = 99999999.;
        int closest = 0;
        if (d_prev < md) {
            md = d_prev;
            closest = 0;
        }
        if (d_mid < md) {
            md = d_mid;
            closest = 1;
        }
        if (d_next < md) {
            closest = 2;
        }

        if (closest == 0) {
            points[2] = mid;
            points[1] = BezPoint(mid_prev, .5 * (prev.t + mid.t));
        } else if (closest == 1) {
            points[0] = BezPoint(mid_prev, .5 * (prev.t + mid.t));
            points[2] = BezPoint(mid_next, .5 * (next.t + mid.t));
        } else {
            points[0] = mid;
            points[1] = BezPoint(mid_next, .5 * (next.t + mid.t));
        }
    }

    closestPoint = points[1].pos;
    t = points[1].t;
    closestDist = distance(pos, closestPoint);
}


vec2 loadCP(int i)
{
    ivec2 screenSize = imageSize(outputImage);
    vec4 p = vec4(position[i*3+0], position[i*3+1], position[i*3+2], 1.0);
    vec4 proj = viewProjectionMatrix * p;
    proj.y = -proj.y;
    vec2 clip = proj.xy / proj.w;
    return screenSize * 0.5 * (clip + 1.);
}

// Load a bezier segment from an index into the control point buffer
Bezier loadCubicSegment(int baseControlPoint, int segmentIndex) {
    vec2 p0 = loadCP(baseControlPoint + segmentIndex*3 + 0);
    vec2 p1 = loadCP(baseControlPoint + segmentIndex*3 + 1);
    vec2 p2 = loadCP(baseControlPoint + segmentIndex*3 + 2);
    vec2 p3 = loadCP(baseControlPoint + segmentIndex*3 + 3);
    return Bezier(p0, p1, p2, p3);
}

shared Bezier[MAX_CURVES_PER_TILE] s_curves;

void main() {
    uvec2 tileCoord = gl_WorkGroupID.xy;
    uint tileIndex = tileCoord.y * tilesCountX + tileCoord.x;
    int tileCurveCount = imageLoad(tileCurveCountImage, ivec2(tileCoord)).x;
    uvec2 coord = gl_GlobalInvocationID.xy;
    //uvec2 coord = tileCoord * uvec2(TILE_SIZE_X, TILE_SIZE_Y) + gl_LocalInvocationID.xy;

    // load curves in shared memory
    if (gl_LocalInvocationIndex == 0) {
        for (int i = 0; i < tileCurveCount; ++i) {
            ControlPointRange curveRange = curves[tiles[tileIndex].curves[i]];
            s_curves[i] = loadCubicSegment(curveRange.start, 0);
        }
    }
    barrier();

    vec4 color = vec4(0.0);
    float mindist = 99999999.;

    for (int i = 0; i < tileCurveCount; ++i) {
        vec2 closestPoint;
        float t;
        float closestDist;
        bezierProj(s_curves[i], vec2(coord), closestPoint, t, closestDist);
        float dist = closestDist;
        //imageStore(outputImage, ivec2(coord), vec4(vec3(tileCurveCount), 1.0));
        float profile = 0.5;
        float mask = 1.0-smoothstep(profile, profile+1.0, dist);
        color = max(color, vec4(vec3(mask), 1.0));
        //color = vec4(vec3(mask), 1.0);
        mindist = min(mindist, dist);
    }

    imageStore(outputImage, ivec2(coord), vec4(1.0));

}